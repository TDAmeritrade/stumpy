# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

stages:
- stage: Build

  jobs:
  - job: Job

    strategy:
      matrix:
        python36_linux:
          imageName: "ubuntu-16.04"
          python.version: "3.6"
        python36_windows:
          imageName: "vs2017-win2016"
          python.version: "3.6"
        python36_macos:
          imageName: "macos-10.13"
          python.version: "3.6"
        python37_linux:
          imageName: "ubuntu-16.04"
          python.version: "3.7"
        python37_windows:
          imageName: "vs2017-win2016"
          python.version: "3.7"
        python37_macos:
          imageName: "macos-10.13"
          python.version: "3.7"
      maxParallel: 10

    pool:
      vmImage: $(imageName)

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    - script: |
        pip install --editable .[ci]
        pip install pytest-azurepipelines
      displayName: 'Install stumpy and other dependencies'

    - script: |
        black --check ./
      displayName: "Running black"

    - script: |
        flake8 ./
      displayName: "Running flake8"

    - bash: ./test.sh
      displayName: "Running test"

    - script: |
        codecov --token=$(CODECOV_TOKEN)
      displayName: "Upload test coverage results"

- stage: Scan
  displayName: "FOSSA"

  jobs:
  - job: FOSSA
    displayName: "Analyze OSS licenses with FOSSA cli"

    pool:
      vmImage: "ubuntu-16.04"

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
      displayName: 'Use Python 3.7'

    - script: |
        pip install --editable .[ci]
        pip install pytest-azurepipelines
      displayName: 'Install stumpy and other dependencies'

    - task: GoTool@0
      inputs:
        version: 1.10

    - bash: ./fossa.sh $(FOSSA_API_KEY)